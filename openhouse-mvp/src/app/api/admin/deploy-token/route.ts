import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase'
import { verifyJWT } from '@/lib/jwt'
import { createWalletClient, createPublicClient, http, parseUnits } from 'viem'
import { base, baseSepolia } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts'

interface DeployTokenRequest {
  property_id: string
}

// fix: PropertyShareToken contract bytecode and ABI for deployment (Cursor Rule 4)
const PROPERTY_SHARE_TOKEN_ABI = [
  {
    inputs: [
      { name: '_name', type: 'string' },
      { name: '_symbol', type: 'string' },
      { name: '_propertyId', type: 'uint256' },
      { name: '_totalShares', type: 'uint256' },
      { name: '_pricePerToken', type: 'uint256' },
      { name: '_fundingGoalUsdc', type: 'uint256' },
      { name: '_fundingDeadline', type: 'uint256' },
      { name: '_treasury', type: 'address' },
      { name: '_operator', type: 'address' }
    ],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    inputs: [
      { name: 'to', type: 'address' },
      { name: 'amount', type: 'uint256' }
    ],
    name: 'mintTo',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }
] as const

// fix: get environment-specific configuration (Cursor Rule 4)
function getDeployerPrivateKey(): `0x${string}` {
  const privateKey = process.env.DEPLOYER_PRIVATE_KEY
  if (!privateKey) {
    throw new Error('DEPLOYER_PRIVATE_KEY environment variable is required')
  }
  return privateKey as `0x${string}`
}

function getTreasuryAddress(): `0x${string}` {
  const treasury = process.env.TREASURY_WALLET_ADDRESS
  if (!treasury) {
    throw new Error('TREASURY_WALLET_ADDRESS environment variable is required')
  }
  return treasury as `0x${string}`
}

function getChainId(): number {
  const chainId = process.env.NEXT_PUBLIC_BASE_CHAIN_ID
  return chainId ? parseInt(chainId) : baseSepolia.id
}

export async function POST(request: NextRequest) {
  try {
    // fix: verify JWT token from cookie (Cursor Rule 3)
    const token = request.cookies.get('app-session-token')?.value
    if (!token) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    const payload = await verifyJWT(token)
    if (!payload || !payload.wallet_address) {
      return NextResponse.json(
        { error: 'Invalid authentication token' },
        { status: 401 }
      )
    }

    const walletAddress = payload.wallet_address.toLowerCase()

    // fix: use service role key for server-side operations (Cursor Rule 3)
    if (!supabaseAdmin) {
      return NextResponse.json(
        { error: 'Database configuration error' },
        { status: 500 }
      )
    }

    // fix: validate session via Supabase RPC (Cursor Rule 3)
    const { data: sessionValid, error: sessionError } = await supabaseAdmin
      .rpc('is_valid_session', { 
        wallet_addr: walletAddress 
      })

    if (sessionError || !sessionValid) {
      return NextResponse.json(
        { error: 'Invalid session' },
        { status: 401 }
      )
    }

    // fix: verify user is admin (Cursor Rule 3)
    const { data: user, error: userError } = await supabaseAdmin
      .from('users')
      .select('is_admin')
      .eq('wallet_address', walletAddress)
      .single()

    if (userError || !user?.is_admin) {
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      )
    }

    const { property_id }: DeployTokenRequest = await request.json()

    if (!property_id) {
      return NextResponse.json(
        { error: 'Property ID is required' },
        { status: 400 }
      )
    }

    // fix: validate property exists and funding goal is met (Cursor Rule 6)
    const { data: property, error: propertyError } = await supabaseAdmin
      .from('properties')
      .select('id, name, status, price_per_token, total_shares, funding_goal_usdc, funding_deadline, token_contract_address')
      .eq('id', property_id)
      .single()

    if (propertyError || !property) {
      return NextResponse.json(
        { error: 'Property not found' },
        { status: 404 }
      )
    }

    if (property.status !== 'active') {
      return NextResponse.json(
        { error: 'Property must be active to deploy token contract' },
        { status: 400 }
      )
    }

    if (property.token_contract_address) {
      return NextResponse.json(
        { error: 'Token contract already deployed for this property' },
        { status: 400 }
      )
    }

    // fix: verify funding goal is met (Cursor Rule 6)
    const { data: reservations, error: reservationsError } = await supabaseAdmin
      .from('payment_authorizations')
      .select('usdc_amount')
      .eq('property_id', property_id)
      .eq('payment_status', 'approved')

    if (reservationsError) {
      return NextResponse.json(
        { error: 'Failed to validate funding progress' },
        { status: 500 }
      )
    }

    const totalFunding = reservations?.reduce((sum, res) => sum + parseFloat(res.usdc_amount.toString()), 0) || 0

    if (totalFunding < parseFloat(property.funding_goal_usdc.toString())) {
      return NextResponse.json(
        { error: 'Funding goal not yet reached' },
        { status: 400 }
      )
    }

    console.log(`üöÄ Deploying PropertyShareToken for: ${property.name}`)
    console.log(`üí∞ Funding goal met: $${totalFunding.toLocaleString()}`)

    // fix: generate token details (Cursor Rule 4)
    const tokenSymbol = `OH${property.name.replace(/\s+/g, '').toUpperCase().substring(0, 8)}`
    const tokenName = `${property.name} Shares`

    // fix: initialize blockchain client for deployment (Cursor Rule 4)
    const chainId = getChainId()
    const deployerPrivateKey = getDeployerPrivateKey()
    const treasuryAddress = getTreasuryAddress()
    
    const account = privateKeyToAccount(deployerPrivateKey)
    const chain = chainId === base.id ? base : baseSepolia
    
    const walletClient = createWalletClient({
      account,
      chain,
      transport: http()
    })

    // fix: prepare contract constructor arguments (Cursor Rule 4)
    // Convert UUID to numeric hash for propertyId
    const propertyIdHash = property_id.replace(/-/g, '').split('').reduce((acc, char) => {
      return acc + char.charCodeAt(0)
    }, 0)
    
    const constructorArgs = [
      tokenName, // _name
      tokenSymbol, // _symbol
      BigInt(propertyIdHash), // _propertyId (convert UUID to numeric hash)
      BigInt(property.total_shares), // _totalShares
      parseUnits(property.price_per_token.toString(), 6), // _pricePerToken (USDC has 6 decimals)
      parseUnits(property.funding_goal_usdc.toString(), 6), // _fundingGoalUsdc
      BigInt(Math.floor(new Date(property.funding_deadline).getTime() / 1000)), // _fundingDeadline (unix timestamp)
      treasuryAddress, // _treasury
      account.address // _operator (deployer as operator)
    ] as const

    console.log(`üìù Contract arguments:`, {
      name: tokenName,
      symbol: tokenSymbol,
      totalShares: property.total_shares,
      pricePerToken: property.price_per_token,
      treasury: treasuryAddress,
      operator: account.address
    })

    // fix: deploy PropertyShareToken contract with real bytecode (Cursor Rule 4)
    const deploymentHash = await walletClient.deployContract({
      abi: PROPERTY_SHARE_TOKEN_ABI,
      bytecode: '0x6101606040523480156200001257600080fd5b506040516200185d3803806200185d8339810160408190526200003591620004d8565b338989600362000046838262000629565b50600462000055828262000629565b5050506001600160a01b0381166200008857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200009381620003a1565b506001600655856200010e5760405162461bcd60e51b815260206004820152603a60248201527f50726f70657274795368617265546f6b656e3a20746f74616c2073686172657360448201527f206d7573742062652067726561746572207468616e207a65726f00000000000060648201526084016200007f565b60008511620001865760405162461bcd60e51b815260206004820152603d60248201527f50726f70657274795368617265546f6b656e3a2070726963652070657220746f60448201527f6b656e206d7573742062652067726561746572207468616e207a65726f00000060648201526084016200007f565b60008411620001fe5760405162461bcd60e51b815260206004820152603a60248201527f50726f70657274795368617265546f6b656e3a2066756e64696e6720676f616c60448201527f206d7573742062652067726561746572207468616e207a65726f00000000000060648201526084016200007f565b428311620002755760405162461bcd60e51b815260206004820152603a60248201527f50726f70657274795368617265546f6b656e3a2066756e64696e67206465616460448201527f6c696e65206d75737420626520696e207468652066757475726500000000000060648201526084016200007f565b6001600160a01b038216620002e95760405162461bcd60e51b815260206004820152603360248201527f50726f70657274795368617265546f6b656e3a20747265617375727920616464604482015272726573732063616e6e6f74206265207a65726f60681b60648201526084016200007f565b6001600160a01b0381166200035d5760405162461bcd60e51b815260206004820152603360248201527f50726f70657274795368617265546f6b656e3a206f70657261746f7220616464604482015272726573732063616e6e6f74206265207a65726f60681b60648201526084016200007f565b60809690965260a09490945260c09290925260e052610100526001600160a01b0390811661012052166101405250506007805460ff191690556000600855620006f5565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200041b57600080fd5b81516001600160401b0380821115620004385762000438620003f3565b604051601f8301601f19908116603f01168101908282118183101715620004635762000463620003f3565b81604052838152602092508660208588010111156200048157600080fd5b600091505b83821015620004a5578582018301518183018401529082019062000486565b6000602085830101528094505050505092915050565b80516001600160a01b0381168114620004d357600080fd5b919050565b60008060008060008060008060006101208a8c031215620004f857600080fd5b89516001600160401b03808211156200051057600080fd5b6200051e8d838e0162000409565b9a5060208c01519150808211156200053557600080fd5b50620005448c828d0162000409565b98505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a015192506200057860e08b01620004bb565b9150620005896101008b01620004bb565b90509295985092959850929598565b600181811c90821680620005ad57607f821691505b602082108103620005ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000624576000816000526020600020601f850160051c81016020861015620005ff5750805b601f850160051c820191505b8181101562000620578281556001016200060b565b5050505b505050565b81516001600160401b03811115620006455762000645620003f3565b6200065d8162000656845462000598565b84620005d4565b602080601f8311600181146200069557600084156200067c5750858301515b600019600386901b1c1916600185901b17855562000620565b600085815260208120601f198616915b82811015620006c657888601518255948401946001909101908401620006a5565b5085821015620006e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161012051610140516110b9620007a46000396000610279015260006103980152600081816102030152818161035601526103f0015260008181610330015281816104fb0152610960015260008181610308015261041701526000818161023d015281816102e2015281816105cd015281816105fb015281816107b901526108c30152600081816102bf015281816104c1015261093d01526110b96000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063715018a6116100de578063a844545d11610097578063dd62ed3e11610071578063dd62ed3e14610483578063ee7a3b8e146104bc578063f2fde38b146104e3578063f6415238146104f657600080fd5b8063a844545d1461045b578063a9059cbb14610463578063bf538f6f1461047657600080fd5b8063715018a6146103e3578063796b23bb146103eb5780637b1b1de6146104125780638da5cb5b1461043957806395d89b411461044a578063a2309ff81461045257600080fd5b8063313ce5671161014b578063570ca73511610125578063570ca735146102745780635de5f3be146102b357806361d027b31461039357806370a08231146103ba57600080fd5b8063313ce567146102295780633a98ef3914610238578063449a52f81461025f57600080fd5b806306fdde0314610193578063095ea7b3146101b157806318160ddd146101d45780631b994edc146101e657806323b872dd146101ee57806329ff22b314610201575b600080fd5b61019b61051d565b6040516101a89190610ec1565b60405180910390f35b6101c46101bf366004610f2c565b6105af565b60405190151581526020016101a8565b6002545b6040519081526020016101a8565b6101d86105c9565b6101c46101fc366004610f56565b610639565b7f000000000000000000000000000000000000000000000000000000000000000042116101c4565b604051601281526020016101a8565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b61027261026d366004610f2c565b61065d565b005b61029b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a8565b600754600854604080517f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201527f0000000000000000000000000000000000000000000000000000000000000000608082015260ff909216151560a083015260c082015260e0016101a8565b61029b7f000000000000000000000000000000000000000000000000000000000000000081565b6101d86103c8366004610f92565b6001600160a01b031660009081526020819052604090205490565b6102726109c4565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6005546001600160a01b031661029b565b61019b6109d8565b6101d860085481565b6102726109e7565b6101c4610471366004610f2c565b610aa7565b6007546101c49060ff1681565b6101d8610491366004610fb4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6102726104f1366004610f92565b610ab5565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b60606003805461052c90610fe7565b80601f016020809104026020016040519081016040528092919081815260200182805461055890610fe7565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b5050505050905090565b6000336105bd818585610af3565b60019150505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006000036105f95750600090565b7f000000000000000000000000000000000000000000000000000000000000000060085461271061062a9190611037565b610634919061104e565b905090565b600033610647858285610b05565b610652858585610b84565b506001949350505050565b610665610be3565b61066d610c10565b60075460ff16156106dc5760405162461bcd60e51b815260206004820152602e60248201527f50726f70657274795368617265546f6b656e3a206d696e74696e67206861732060448201526d1899595b8818dbdb5c1b195d195960921b60648201526084015b60405180910390fd5b6001600160a01b03821661074a5760405162461bcd60e51b815260206004820152602f60248201527f50726f70657274795368617265546f6b656e3a2063616e6e6f74206d696e742060448201526e746f207a65726f206164647265737360881b60648201526084016106d3565b600081116107b75760405162461bcd60e51b815260206004820152603460248201527f50726f70657274795368617265546f6b656e3a20616d6f756e74206d7573742060448201527362652067726561746572207468616e207a65726f60601b60648201526084016106d3565b7f0000000000000000000000000000000000000000000000000000000000000000816008546107e69190611070565b11156108535760405162461bcd60e51b815260206004820152603660248201527f50726f70657274795368617265546f6b656e3a2063616e6e6f74206d696e74206044820152756d6f7265207468616e20746f74616c2073686172657360501b60648201526084016106d3565b61085d8282610c3a565b806008600082825461086f9190611070565b90915550506008546040516001600160a01b038416917f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475916108b991858252602082015260400190565b60405180910390a27f0000000000000000000000000000000000000000000000000000000000000000600854036109b6576007805460ff191660011790557f92a5a58f3b8301a3d8da01177c259253e5ab9720635bc3fd71682fe7615794a761092160025490565b604080519182524260208301520160405180910390a1604080517f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152428183015290517f5c2cb5015027cb95196f52d0d4ffe39c9702fc85ee2af6e06122d2c7f1dc50fc9181900360600190a15b6109c06001600655565b5050565b6109cc610be3565b6109d66000610c70565b565b60606004805461052c90610fe7565b6109ef610be3565b60075460ff1615610a585760405162461bcd60e51b815260206004820152602d60248201527f50726f70657274795368617265546f6b656e3a206d696e74696e6720616c726560448201526c18591e4818dbdb5c1b195d1959609a1b60648201526084016106d3565b6007805460ff191660011790557f92a5a58f3b8301a3d8da01177c259253e5ab9720635bc3fd71682fe7615794a7610a8f60025490565b604080519182524260208301520160405180910390a1565b6000336105bd818585610b84565b610abd610be3565b6001600160a01b038116610ae757604051631e4fbdf760e01b8152600060048201526024016106d3565b610af081610c70565b50565b610b008383836001610cc2565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610b7e5781811015610b6f57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016106d3565b610b7e84848484036000610cc2565b50505050565b6001600160a01b038316610bae57604051634b637e8f60e11b8152600060048201526024016106d3565b6001600160a01b038216610bd85760405163ec442f0560e01b8152600060048201526024016106d3565b610b00838383610d97565b6005546001600160a01b031633146109d65760405163118cdaa760e01b81523360048201526024016106d3565b600260065403610c3357604051633ee5aeb560e01b815260040160405180910390fd5b6002600655565b6001600160a01b038216610c645760405163ec442f0560e01b8152600060048201526024016106d3565b6109c060008383610d97565b600580546001600160a01b038381166001600160a01b0319831681179093516040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610cec5760405163e602df0560e01b8152600060048201526024016106d3565b6001600160a01b038316610d1657604051634a1406b160e11b8152600060048201526024016106d3565b6001600160a01b0380851660009081526001602090815260408083209387168352929052208290558015610b7e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d8991815260200190565b60405180910390a350505050565b6001600160a01b038316610dc2578060026000828254610db79190611070565b90915550610e349050565b6001600160a01b03831660009081526020819052604090205481811015610e155760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016106d3565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610e5057600280548290039055610e6f565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610eb491815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610eef57858101830151858201604001528201610ed3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610f2757600080fd5b919050565b60008060408385031215610f3f57600080fd5b610f4883610f10565b946020939093013593505050565b600080600060608486031215610f6b57600080fd5b610f7484610f10565b9250610f8260208501610f10565b9150604084013590509250925092565b600060208284031215610fa457600080fd5b610fad82610f10565b9392505050565b60008060408385031215610fc757600080fd5b610fd083610f10565b9150610fde60208401610f10565b90509250929050565b600181811c90821680610ffb57607f821691505b60208210810361101b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105c3576105c3611021565b60008261106b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105c3576105c361102156fea2646970667358221220ef27ae916e2c4f9e89bf27673c252d55bce69ceca38a8c53fa2195a7bc41e66064736f6c63430008180033' as `0x${string}`,
      args: constructorArgs
    })

    console.log(`‚è≥ Deployment transaction: ${deploymentHash}`)

    // fix: wait for deployment confirmation using publicClient (Cursor Rule 4)
    const publicClient = createPublicClient({
      chain,
      transport: http()
    })
    
    const receipt = await publicClient.waitForTransactionReceipt({
      hash: deploymentHash
    })

    if (!receipt.contractAddress) {
      throw new Error('Contract deployment failed - no contract address returned')
    }

    const contractAddress = receipt.contractAddress
    console.log(`‚úÖ PropertyShareToken deployed at: ${contractAddress}`)

    // fix: update property with real contract address and status (Cursor Rule 4)
    const { error: propertyUpdateError } = await supabaseAdmin
      .from('properties')
      .update({
        token_contract_address: contractAddress,
        token_symbol: tokenSymbol,
        token_deployment_hash: deploymentHash,
        status: 'funded' // fix: change status to funded after token deployment (Cursor Rule 4)
      })
      .eq('id', property_id)

    if (propertyUpdateError) {
      return NextResponse.json(
        { error: 'Failed to update property with token details' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'PropertyShareToken contract deployed successfully',
      deployment: {
        property_id: property_id,
        property_name: property.name,
        contract_address: contractAddress,
        token_name: tokenName,
        token_symbol: tokenSymbol,
        total_shares: property.total_shares,
        price_per_token: property.price_per_token,
        deployment_hash: deploymentHash,
        treasury_address: treasuryAddress,
        operator_address: account.address,
        chain_id: chainId,
        explorer_url: chainId === base.id 
          ? `https://basescan.org/tx/${deploymentHash}`
          : `https://sepolia.basescan.org/tx/${deploymentHash}`
      }
    })

  } catch (error) {
    console.error('‚ùå Contract deployment failed:', error)
    return NextResponse.json(
      { error: `Contract deployment failed: ${error instanceof Error ? error.message : 'Unknown error'}` },
      { status: 500 }
    )
  }
} 